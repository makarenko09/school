plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'ru.hogwarts'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.google.code.gson:gson:2.13.1'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.18.3'


	implementation 'org.springframework.boot:spring-boot-starter-web'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	//http://localhost:8080/v3/api-docs
	//http://localhost:8090/swagger-ui/index.html#/
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.8.6'
	//DB
// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.4.3'
	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	implementation 'org.postgresql:postgresql:42.7.5'
	//add to project Spring AOP
	implementation 'org.springframework.boot:spring-boot-starter-aop'
}

tasks.named('test') {
	useJUnitPlatform()
}


import org.springframework.boot.gradle.tasks.bundling.BootJar

/* ---------- основной BootJar остаётся без изменений ---------- */

def MAIN_CLASS = 'ru.hogwarts.school.SchoolApplication'
def JAVA_VER   = JavaVersion.VERSION_17
def RUNTIME_CP = sourceSets.main.runtimeClasspath

/* ---------- dev JAR ----------------------------------------- */
tasks.register('bootJarDev', BootJar) {
	group       = 'build'
	dependsOn   'classes'               // чтобы скомпилировались классы

	archiveClassifier.set('dev')        // school‑…‑dev.jar
	mainClass.set(MAIN_CLASS)
	classpath          = RUNTIME_CP
	targetJavaVersion  = JAVA_VER
}

/* ---------- additional JAR ---------------------------------- */
tasks.register('bootJarAdditional', BootJar) {
	group       = 'build'
	dependsOn   'classes'

	archiveClassifier.set('additional') // school‑…‑additional.jar
	mainClass.set(MAIN_CLASS)
	classpath          = RUNTIME_CP
	targetJavaVersion  = JAVA_VER
}

/* ---------- собрать оба сразу ------------------------------- */
tasks.register('bootJarAll') {
	group       = 'build'
	description = 'Build mono and poly-recording (dev + additional) executable JARs'
	dependsOn   'bootJar','bootJarDev', 'bootJarAdditional'
}
